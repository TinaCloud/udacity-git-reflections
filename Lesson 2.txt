Lesson 2 Reflections:

What happens when you initialize a repository? Why do you need to do it?
	It adds a hidden '.git' directory, but doesn't do an initial commit (you must specify all commits, even first one)
	inside .git directory, there is a bunch of infrastructure to keep track of the repository history
	Here's the documentation site for more info:
	http://git-scm.com/docs/git-init
	You need to do it because this is what sets up the infrastructure to support the repository.

How is the staging area different from the working directory and the repository?  What do you think it offers?
	The staging area stores what items in your working directory you want to put into the repository during the next commit.
	It offers you the control over your commits so that the changes saved are only the ones that are grouped into that logical change

How can you use the staging area to make sure you have one commit per logical change?
	by typing "git diff" you get the changes you've made to the staging area.
	by typing "git diff --staged" you see the changes between the master and the staging area
	by using "git add <file>" you can specify which files to add to your commit, allowing you to only add files that are part of the logical change to the next commit
	by typing "git reset <file>" you can pull a file from the staging area in case it is not part of the logical change.

What are some situations when branches would be helpful in keeping your history organized?  How would branches help?
	When you create different versions of the program, like experimental features or foreign language support.
	Branches keep the alternate versions separate from the main version
	You can have a master branch that always works and is "production quality", an then have other branches for what is under development.

How do the diagrams help you visualize the branch structure?
	They illustrated the idea of reachability, and how you can checkout a previous commit to put yourself in a "detached HEAD state"
	that can be unreachable if you checkout a commit on a named branch.  You can use git checkout -b "new_branch_name" to keep changes in
	a detached HEAD state.

Some personal notes on branching:
	"git branch -r" shows remote branches of the repository (you already downloaded the remote branches when you cloned the repository).
	"git branch" only shows branches you've created/checked out locally, but "git checkout <branch_name>" will look for <branch_name> in local
	and remote locations.
	"git merge master <branch_name>" merges <branch_name> to master with a new commit that has both branches as parents.
	NOTE about git merge: git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.
	once merged, "git log" displays commits sorted in timestamp order.
	"git branch -d <branch_name>" deletes the branch
	"git merge --abort" resets to the state prior to attempting a merge if there were issues with the merge (i.e. conflicts arrose between the two branches)
	commit conflicts can arrise if branches are edited on different operating systems due to the line feed / CRLF difference.  To fix this use "git config --global core.autocrlf true".  More info: https://help.github.com/articles/dealing-with-line-endings/#platform-all
	"git show <commit_id>" automatically compares ("git diff") a commit with its parent.

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?
	The result is a new commit with 2 parents, one from each branch. This preserves reachability for all commits from both branches.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
	Auto-merging saves a lot of time, but it is error-prone because it isn't "smart" enough to know what is the best choice of code to keep in a program when there are conflicts.  Also, if the code is edited in such a way as to move things around, it will really mess up the merge logic.

To add local repository to github:
	log on to github and click "+" sign.
	name repository and add description (optional readme)
	copy link of repository when done
	"git remote add <short-name> <repository-url>" first shortname = origin by convention
	"git push [-u] <remote-name> <branch-name>" -u sets up tracking: “Tracking” is essentially a link between a local and remote branch. When working on a local branch that tracks some other branch, you can git pull and git push without any extra arguments and git will know what to do.
		However, git push will by default push all branches that have the same name on the remote. To limit this behavior to just the current branch, set this configuration option:
		$ git config --global push.default tracking
		This is to prevent accidental pushes to branches which you’re not ready to push yet.
		For more tips: http://mislav.uniqpath.com/2010/07/git-tips/
