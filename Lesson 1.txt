Reflections:

How did reviewing a diff between two versions help you spot the bug?
	It narrowed down the changes to sift through

How could having easy access to the entire history of a file make you a more efficient programmer?
	You can see how your program evolved (and your skills as a coder)
	You can undo mistakes by going back to working versions
	You can go back to previous versions to steal and reuse code segments that might be useful again

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
	Pros: each commit is deliberate and done for the reasons chosen by user (namely at a logical point to commit)
	Cons: you can forget to commit and have a lot of stuff change all at once, or commit too often and clutter the history

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
	Git is good for managing coding projects, which often have many interdependent files. So to have one logical commit, it must support many files changing in one commit.
	
How can you use the commands "git log" and "git diff" to view the history of files?
	"git log" lets you view a summary of all commits going backwards in time (using the "--stat" flag lets you get more details about the changes)
	"git diff" lets you see exactly what changed between one commit and the next, line by line
	
How might using version control make you more confident to make changes that could break something?
	If you do break something, you can go back and figure out where you broke it and how, and then use that knowledge to fix it again!
	Also, if something doesn't work out, you can always go back to how it was before and undo all your changes!

Now that you have your workspace set up, what do you want to try using Git for?
	I want to contribute to an open source project that uses Python!

What happens when you initialize a repository? Why do you need to do it?
	It adds a hidden '.git' directory, but doesn't do an initial commit (you must specify all commits, even first one)
	inside .git directory, there is a bunch of infrastructure to keep track of the repository history
	Here's the documentation site for more info:
	http://git-scm.com/docs/git-init
	You need to do it because this is what sets up the infrastructure to support the repository.

How is the staging area different from the working directory and the repository?  What do you think it offers?
	The staging area stores what items in your working directory you want to put into the repository during the next commit.
	It offers you the control over your commits so that the changes saved are only the ones that are grouped into that logical change
	